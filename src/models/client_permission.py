"""
ClientPermission model for mapping clients to authorized routes.
"""
from typing import Optional, List
from dataclasses import dataclass
import time

from .route import HttpMethod


@dataclass
class ClientPermission:
    """
    Represents permission for a client to access a specific route with specific HTTP methods.

    Attributes:
        permission_id: Unique identifier for the permission (auto-generated if None)
        client_id: ID of the client this permission applies to
        route_id: ID of the route this permission grants access to
        allowed_methods: List of HTTP methods the client can use on this route
        created_at: Unix timestamp of when the permission was created
    """
    client_id: str
    route_id: str
    allowed_methods: List[HttpMethod]
    created_at: int
    permission_id: Optional[str] = None

    def __post_init__(self) -> None:
        self._validate_methods()

    def _validate_methods(self) -> None:
        """Validate that at least one method is specified."""
        if not self.allowed_methods:
            raise ValueError("At least one HTTP method must be specified")

    def allows_method(self, method: HttpMethod) -> bool:
        """
        Check if a specific HTTP method is allowed.

        Args:
            method: The HTTP method to check

        Returns:
            True if the method is allowed, False otherwise
        """
        return method in self.allowed_methods

    @classmethod
    def from_dict(cls, data: dict) -> 'ClientPermission':
        """
        Create a ClientPermission instance from a dictionary (e.g., from database).

        Args:
            data: Dictionary containing permission data

        Returns:
            ClientPermission instance
        """
        # Convert method strings to HttpMethod enums
        allowed_methods = [HttpMethod(m) for m in data['allowed_methods']]

        return cls(
            permission_id=data.get('permission_id'),
            client_id=data['client_id'],
            route_id=data['route_id'],
            allowed_methods=allowed_methods,
            created_at=data['created_at']
        )

    def to_dict(self) -> dict:
        """
        Convert ClientPermission instance to a dictionary for storage.

        Returns:
            Dictionary representation of the permission
        """
        return {
            'permission_id': self.permission_id,
            'client_id': self.client_id,
            'route_id': self.route_id,
            'allowed_methods': [m.value for m in self.allowed_methods],
            'created_at': self.created_at
        }

    @classmethod
    def create_new(
        cls,
        client_id: str,
        route_id: str,
        allowed_methods: List[HttpMethod],
        permission_id: Optional[str] = None
    ) -> 'ClientPermission':
        """
        Create a new ClientPermission with current timestamp.

        Args:
            client_id: ID of the client
            route_id: ID of the route
            allowed_methods: List of allowed HTTP methods
            permission_id: Optional unique identifier (auto-generated by database if None)

        Returns:
            New ClientPermission instance
        """
        now = int(time.time())
        return cls(
            client_id=client_id,
            route_id=route_id,
            allowed_methods=allowed_methods,
            created_at=now,
            permission_id=permission_id
        )

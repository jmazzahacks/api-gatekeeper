"""
Client model for API authentication.
"""
from typing import Optional
from dataclasses import dataclass
from enum import Enum
import time


class ClientStatus(Enum):
    """Status of a client account."""
    ACTIVE = "active"
    SUSPENDED = "suspended"
    REVOKED = "revoked"


@dataclass
class Client:
    """
    Represents a client that can authenticate to protected API routes.

    Attributes:
        client_id: Unique identifier for the client (auto-generated if None)
        client_name: Human-readable name for the client
        shared_secret: Secret key for HMAC signature generation (optional)
        api_key: API key for simpler authentication (optional)
        status: Current status of the client account
        created_at: Unix timestamp of when the client was created
        updated_at: Unix timestamp of last update
    """
    client_name: str
    status: ClientStatus
    created_at: int
    updated_at: int
    client_id: Optional[str] = None
    shared_secret: Optional[str] = None
    api_key: Optional[str] = None

    def __post_init__(self) -> None:
        self._validate_credentials()

    def _validate_credentials(self) -> None:
        """Validate that at least one credential type is provided."""
        if not self.shared_secret and not self.api_key:
            raise ValueError("Client must have at least one of: shared_secret or api_key")

    def is_active(self) -> bool:
        """
        Check if the client is currently active.

        Returns:
            True if status is ACTIVE, False otherwise
        """
        return self.status == ClientStatus.ACTIVE

    def has_shared_secret(self) -> bool:
        """Check if client has a shared secret for HMAC auth."""
        return self.shared_secret is not None

    def has_api_key(self) -> bool:
        """Check if client has an API key."""
        return self.api_key is not None

    @classmethod
    def from_dict(cls, data: dict) -> 'Client':
        """
        Create a Client instance from a dictionary (e.g., from database).

        Args:
            data: Dictionary containing client data

        Returns:
            Client instance
        """
        return cls(
            client_id=data['client_id'],
            client_name=data['client_name'],
            shared_secret=data.get('shared_secret'),
            api_key=data.get('api_key'),
            status=ClientStatus(data['status']),
            created_at=data['created_at'],
            updated_at=data['updated_at']
        )

    def to_dict(self) -> dict:
        """
        Convert Client instance to a dictionary for storage.

        Returns:
            Dictionary representation of the client
        """
        return {
            'client_id': self.client_id,
            'client_name': self.client_name,
            'shared_secret': self.shared_secret,
            'api_key': self.api_key,
            'status': self.status.value,
            'created_at': self.created_at,
            'updated_at': self.updated_at
        }

    @classmethod
    def create_new(
        cls,
        client_name: str,
        shared_secret: Optional[str] = None,
        api_key: Optional[str] = None,
        status: ClientStatus = ClientStatus.ACTIVE,
        client_id: Optional[str] = None
    ) -> 'Client':
        """
        Create a new Client with current timestamp.

        Args:
            client_name: Human-readable name for the client
            shared_secret: Optional secret key for HMAC authentication
            api_key: Optional API key for authentication
            status: Client status (default: ACTIVE)
            client_id: Optional unique identifier (auto-generated by database if None)

        Returns:
            New Client instance
        """
        now = int(time.time())
        return cls(
            client_name=client_name,
            shared_secret=shared_secret,
            api_key=api_key,
            status=status,
            created_at=now,
            updated_at=now,
            client_id=client_id
        )
